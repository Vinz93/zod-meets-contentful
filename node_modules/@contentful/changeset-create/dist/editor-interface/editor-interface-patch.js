"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.editorInterfacePatch = void 0;
const generate_json_patch_1 = require("generate-json-patch");
const changeset_utils_1 = require("@contentful/changeset-utils");
function editorInterfacePatch({ sourceItem, targetItem, }) {
    const targetFieldControls = targetItem.controls || [];
    const sourceFieldControls = sourceItem.controls || [];
    const targetFieldControlIds = new Set(targetFieldControls.map((fieldControl) => fieldControl.fieldId));
    const sourceFieldControlIds = new Set(sourceFieldControls.map((fieldControl) => fieldControl.fieldId));
    const addedFieldControls = sourceFieldControls.filter(({ fieldId }) => !targetFieldControlIds.has(fieldId));
    // This creates a control item for all added field controls
    // We do this because during merging, this patch will be applied to the editor interface after
    // these fields have been added by the backend during the content type update.
    const defaultAddedFieldControls = (0, changeset_utils_1.getDefaultFieldControls)(addedFieldControls);
    // We remove controls which are not present in the source environment.
    // Again, we do this because during merging, this patch will be applied to the editor interface after
    // these fields have been removed by the backend during the content type update.
    const targetFieldControlsWithoutRemoved = targetFieldControls.filter(({ fieldId }) => sourceFieldControlIds.has(fieldId));
    const targetFieldControlsWithoutRemovedWithAdded = [
        ...targetFieldControlsWithoutRemoved,
        ...defaultAddedFieldControls,
    ];
    return (0, generate_json_patch_1.generateJSONPatch)(
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore
    { controls: targetFieldControlsWithoutRemovedWithAdded }, { controls: sourceFieldControls }, {
        objectHash: function (value, context) {
            const { length, segments } = (0, generate_json_patch_1.pathInfo)(context.path);
            if (length === 2 && segments[1] === 'controls') {
                // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                // @ts-ignore
                return value.fieldId;
            }
            return context.index.toString();
        },
    }
    // We want to ignore any move operations for editor interface controls.
    // Check the changeset-export README.md#editor-interface-controls-order
    ).filter((operation) => operation.op !== 'move');
}
exports.editorInterfacePatch = editorInterfacePatch;
