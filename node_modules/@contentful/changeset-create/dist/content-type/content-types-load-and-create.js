"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.contentTypesLoadAndCreate = void 0;
const contentful_collection_1 = __importDefault(require("contentful-collection"));
const create_content_models_changeset_1 = require("./create-content-models-changeset");
const get_field_id_mapping_1 = require("./get-field-id-mapping");
const LIMIT = 100;
function getContentType({ client, environmentId, spaceId, skipTransformation, }) {
    return (0, contentful_collection_1.default)((options) => client.raw.get(`/spaces/${spaceId}/environments/${environmentId}/content_types`, {
        params: {
            limit: options.limit || LIMIT,
            skip: options.skip,
        },
        headers: {
            'X-Contentful-Skip-Transformation': skipTransformation,
        },
    }));
}
async function contentTypesLoadAndCreate({ clients: { sourceEnvironmentClient, targetEnvironmentClient }, spaceId, sourceEnvironmentId, targetEnvironmentId, }) {
    const [sourceInternal, sourceExternal, targetInternal, targetExternal] = await Promise.all([
        getContentType({
            client: sourceEnvironmentClient,
            spaceId,
            environmentId: sourceEnvironmentId,
            skipTransformation: true,
        }),
        getContentType({
            client: sourceEnvironmentClient,
            spaceId,
            environmentId: sourceEnvironmentId,
            skipTransformation: false,
        }),
        getContentType({
            client: targetEnvironmentClient,
            spaceId,
            environmentId: targetEnvironmentId,
            skipTransformation: true,
        }),
        getContentType({
            client: targetEnvironmentClient,
            spaceId,
            environmentId: targetEnvironmentId,
            skipTransformation: false,
        }),
    ]);
    const mapping = (0, get_field_id_mapping_1.getFieldIdMapping)(sourceInternal, targetInternal);
    return (0, create_content_models_changeset_1.createContentModelsChangeset)({
        sourceContentModel: sourceExternal,
        targetContentModel: targetExternal,
        fieldIdMapForAll: mapping,
    });
}
exports.contentTypesLoadAndCreate = contentTypesLoadAndCreate;
