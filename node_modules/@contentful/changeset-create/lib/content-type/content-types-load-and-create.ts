import { Changeset } from '@contentful/changeset-types'
import getContentfulCollection from 'contentful-collection'
import { ContentTypeProps, PlainClientAPI } from 'contentful-management'
import { LoadAndCreateParams } from '../common'
import { createContentModelsChangeset } from './create-content-models-changeset'
import { getFieldIdMapping } from './get-field-id-mapping'

const LIMIT = 100

type GetContentTypeParams = {
  client: PlainClientAPI
  spaceId: string
  environmentId: string
  skipTransformation: boolean
}

function getContentType({
  client,
  environmentId,
  spaceId,
  skipTransformation,
}: GetContentTypeParams): Promise<ContentTypeProps[]> {
  return getContentfulCollection<ContentTypeProps>((options) =>
    client.raw.get(`/spaces/${spaceId}/environments/${environmentId}/content_types`, {
      params: {
        limit: options.limit || LIMIT,
        skip: options.skip,
      },
      headers: {
        'X-Contentful-Skip-Transformation': skipTransformation,
      },
    })
  )
}

export async function contentTypesLoadAndCreate({
  clients: { sourceEnvironmentClient, targetEnvironmentClient },
  spaceId,
  sourceEnvironmentId,
  targetEnvironmentId,
}: LoadAndCreateParams): Promise<Changeset<'ContentType'>> {
  const [sourceInternal, sourceExternal, targetInternal, targetExternal] = await Promise.all([
    getContentType({
      client: sourceEnvironmentClient,
      spaceId,
      environmentId: sourceEnvironmentId,
      skipTransformation: true,
    }),
    getContentType({
      client: sourceEnvironmentClient,
      spaceId,
      environmentId: sourceEnvironmentId,
      skipTransformation: false,
    }),
    getContentType({
      client: targetEnvironmentClient,
      spaceId,
      environmentId: targetEnvironmentId,
      skipTransformation: true,
    }),
    getContentType({
      client: targetEnvironmentClient,
      spaceId,
      environmentId: targetEnvironmentId,
      skipTransformation: false,
    }),
  ])

  const mapping = getFieldIdMapping(sourceInternal, targetInternal)

  return createContentModelsChangeset({
    sourceContentModel: sourceExternal,
    targetContentModel: targetExternal,
    fieldIdMapForAll: mapping,
  })
}
