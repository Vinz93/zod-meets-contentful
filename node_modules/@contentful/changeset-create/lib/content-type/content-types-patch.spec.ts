import { expect } from 'chai'
import type { ContentTypeProps } from 'contentful-management'
import { deepClone } from 'fast-json-patch'
import { contentTypesPatch } from './content-types-patch'
import { CONTENT_TYPE_MOCK } from '../../test/mocks'
import { createContentTypeFixture, createFieldFixture } from '@contentful/changeset-test-fixtures'
import { BLOCKS, INLINES } from '@contentful/rich-text-types'
import { omit } from 'lodash'
import { Patch } from 'generate-json-patch'
import { createPatchedDocument } from '@contentful/changeset-utils'

const fieldIdMapForAll = new Map([
  [
    'content-type-id',
    {
      source: new Map([['ext-id-new', 'matching-internal-id']]),
      target: new Map([['ext-id-original', 'matching-internal-id']]),
    },
  ],
])

describe('A content types patch function', () => {
  describe('on root level', () => {
    it('detects a changed prop on source', () => {
      const targetContentType: ContentTypeProps = CONTENT_TYPE_MOCK
      const sourceContentType: ContentTypeProps = {
        ...deepClone(CONTENT_TYPE_MOCK),
        displayField: 'slug',
      }

      const patch = contentTypesPatch({ sourceContentType, targetContentType, fieldIdMapForAll })
      expect(patch).to.eqls([{ op: 'replace', path: '/displayField', value: 'slug' }])
    })

    it('detects a root prop change on target', () => {
      const targetContentType: ContentTypeProps = {
        ...deepClone(CONTENT_TYPE_MOCK),
        displayField: 'slug',
      }
      const sourceContentType: ContentTypeProps = CONTENT_TYPE_MOCK

      const patch = contentTypesPatch({ sourceContentType, targetContentType, fieldIdMapForAll })

      expectPatchedEqualsSource(targetContentType, sourceContentType, patch)

      expect(patch).to.eqls([{ op: 'replace', path: '/displayField', value: 'title' }])
    })

    it('ignores changes in a "sys" field', () => {
      const targetContentType: ContentTypeProps = CONTENT_TYPE_MOCK
      const sourceContentType: ContentTypeProps = deepClone(CONTENT_TYPE_MOCK)
      sourceContentType.sys.publishedVersion = 100

      const patch = contentTypesPatch({ sourceContentType, targetContentType, fieldIdMapForAll })

      expectPatchedEqualsSource(targetContentType, sourceContentType, patch)

      expect(patch.length).to.eqls(0)
    })
  })

  describe('on fields level', () => {
    it('detects a changed external field id with matching internal id', () => {
      const targetContentType: ContentTypeProps = createContentTypeFixture('content-type-id', [
        createFieldFixture('ext-id-original'),
      ])
      const sourceContentType: ContentTypeProps = deepClone(targetContentType)
      sourceContentType.fields[0].id = 'ext-id-new'

      const patch = contentTypesPatch({
        sourceContentType,
        targetContentType,
        fieldIdMapForAll,
      })

      expectPatchedEqualsSource(targetContentType, sourceContentType, patch)

      expect(patch).to.eqls([{ op: 'replace', path: '/fields/0/id', value: 'ext-id-new' }])
    })
    it('detects a value change', () => {
      const targetContentType: ContentTypeProps = CONTENT_TYPE_MOCK
      const sourceContentType: ContentTypeProps = deepClone(CONTENT_TYPE_MOCK)
      sourceContentType.fields[0].disabled = true

      const patch = contentTypesPatch({ sourceContentType, targetContentType, fieldIdMapForAll })

      expectPatchedEqualsSource(targetContentType, sourceContentType, patch)

      expect(patch).to.eqls([{ op: 'replace', path: '/fields/0/disabled', value: true }])
    })

    it('detects a field move', () => {
      const targetContentType: ContentTypeProps = CONTENT_TYPE_MOCK
      const sourceContentType: ContentTypeProps = deepClone(CONTENT_TYPE_MOCK)

      const first = sourceContentType.fields[0]
      sourceContentType.fields[0] = sourceContentType.fields[1]
      sourceContentType.fields[1] = first

      const patch = contentTypesPatch({ sourceContentType, targetContentType, fieldIdMapForAll })

      expectPatchedEqualsSource(targetContentType, sourceContentType, patch)

      expect(patch).to.eqls([{ op: 'move', from: '/fields/0', path: '/fields/1' }])
    })

    it('separates move and change operations', () => {
      const targetContentType: ContentTypeProps = CONTENT_TYPE_MOCK
      const sourceContentType: ContentTypeProps = deepClone(CONTENT_TYPE_MOCK)

      const first = sourceContentType.fields[0]
      first.disabled = true
      sourceContentType.fields[0] = sourceContentType.fields[1]
      sourceContentType.fields[1] = first

      const patch = contentTypesPatch({ sourceContentType, targetContentType, fieldIdMapForAll })

      expectPatchedEqualsSource(targetContentType, sourceContentType, patch)

      expect(patch).to.eqls([
        { op: 'replace', path: '/fields/0/disabled', value: true },
        { op: 'move', from: '/fields/0', path: '/fields/1' },
      ])
    })

    it('detects an appended field', () => {
      const targetContentType: ContentTypeProps = CONTENT_TYPE_MOCK
      const sourceContentType: ContentTypeProps = deepClone(CONTENT_TYPE_MOCK)
      sourceContentType.fields.push({
        id: 'new',
        disabled: false,
        localized: false,
        required: false,
        type: 'SomeType',
        name: 'new field',
      })

      const patch = contentTypesPatch({ sourceContentType, targetContentType, fieldIdMapForAll })

      expectPatchedEqualsSource(targetContentType, sourceContentType, patch)

      expect(patch).to.eqls([
        {
          op: 'add',
          path: '/fields/3',
          value: {
            disabled: false,
            id: 'new',
            localized: false,
            name: 'new field',
            required: false,
            type: 'SomeType',
          },
        },
      ])
    })

    it('detects an inserted field', () => {
      const targetContentType: ContentTypeProps = CONTENT_TYPE_MOCK
      const sourceContentType: ContentTypeProps = deepClone(CONTENT_TYPE_MOCK)
      sourceContentType.fields.splice(1, 0, {
        id: 'new',
        disabled: false,
        localized: false,
        required: false,
        type: 'SomeType',
        name: 'new field',
      })

      const patch = contentTypesPatch({ sourceContentType, targetContentType, fieldIdMapForAll })

      expectPatchedEqualsSource(targetContentType, sourceContentType, patch)

      expect(patch).to.eqls([
        {
          op: 'add',
          path: '/fields/3',
          value: {
            disabled: false,
            id: 'new',
            localized: false,
            name: 'new field',
            required: false,
            type: 'SomeType',
          },
        },
        {
          op: 'move',
          path: '/fields/3',
          from: '/fields/2',
        },
        {
          op: 'move',
          path: '/fields/2',
          from: '/fields/1',
        },
      ])
    })

    it('detects a removed field', () => {
      const targetContentType: ContentTypeProps = CONTENT_TYPE_MOCK
      const sourceContentType: ContentTypeProps = deepClone(CONTENT_TYPE_MOCK)
      sourceContentType.fields.splice(1, 1)

      const patch = contentTypesPatch({ sourceContentType, targetContentType, fieldIdMapForAll })

      expectPatchedEqualsSource(targetContentType, sourceContentType, patch)

      expect(patch).to.eqls([
        {
          op: 'remove',
          path: '/fields/1',
        },
      ])
    })

    it('detects two removed fields', () => {
      const targetContentType: ContentTypeProps = CONTENT_TYPE_MOCK
      const sourceContentType: ContentTypeProps = deepClone(CONTENT_TYPE_MOCK)
      sourceContentType.fields.splice(1, 2)

      const patch = contentTypesPatch({ sourceContentType, targetContentType, fieldIdMapForAll })

      expectPatchedEqualsSource(targetContentType, sourceContentType, patch)

      expect(patch).to.eqls([
        {
          op: 'remove',
          path: '/fields/2',
        },
        {
          op: 'remove',
          path: '/fields/1',
        },
      ])
    })

    it('detects multiple field operations', () => {
      const targetContentType: ContentTypeProps = CONTENT_TYPE_MOCK
      const sourceContentType: ContentTypeProps = deepClone(CONTENT_TYPE_MOCK)

      // remove 2. field
      sourceContentType.fields.splice(1, 1)

      // add field at 2. position
      sourceContentType.fields.splice(1, 0, {
        id: 'new',
        disabled: false,
        localized: false,
        required: false,
        type: 'SomeType',
        name: 'new field',
      })

      // change field at 3. position
      sourceContentType.fields[2].disabled = true

      const patch = contentTypesPatch({ sourceContentType, targetContentType, fieldIdMapForAll })

      expectPatchedEqualsSource(targetContentType, sourceContentType, patch)

      expect(patch).to.eqls([
        { op: 'replace', path: '/fields/2/disabled', value: true },
        { op: 'remove', path: '/fields/1' },
        {
          op: 'add',
          path: '/fields/2',
          value: {
            id: 'new',
            disabled: false,
            localized: false,
            required: false,
            type: 'SomeType',
            name: 'new field',
          },
        },
        { op: 'move', from: '/fields/1', path: '/fields/2' },
      ])
    })

    it('detects field type changes', () => {
      const targetContentType = createContentTypeFixture('target', [
        {
          id: 'images',
          name: 'Images',
          type: 'Array',
          localized: false,
          required: false,
          validations: [],
          disabled: false,
          omitted: false,
          items: {
            type: 'Link',
            validations: [],
            linkType: 'Entry',
          },
        },
      ])
      const sourceContentType = createContentTypeFixture('source', [
        {
          id: 'test',
          name: 'test',
          type: 'Symbol',
          localized: false,
          required: false,
          validations: [],
          disabled: false,
          omitted: false,
        },
        {
          id: 'images',
          name: 'Images',
          type: 'Link',
          localized: false,
          required: false,
          validations: [],
          disabled: false,
          omitted: false,
          linkType: 'Asset',
        },
      ])

      const patch = contentTypesPatch({ sourceContentType, targetContentType, fieldIdMapForAll })

      expectPatchedEqualsSource(targetContentType, sourceContentType, patch)

      expect(patch).to.eqls([
        { op: 'remove', path: '/fields/0' },
        {
          op: 'add',
          path: '/fields/0',
          value: {
            id: 'test',
            name: 'test',
            type: 'Symbol',
            localized: false,
            required: false,
            validations: [],
            disabled: false,
            omitted: false,
          },
        },
        {
          op: 'add',
          path: '/fields/1',
          value: {
            id: 'images',
            name: 'Images',
            type: 'Link',
            localized: false,
            required: false,
            validations: [],
            disabled: false,
            omitted: false,
            linkType: 'Asset',
          },
        },
      ])

      expectPatchedEqualsSource(targetContentType, sourceContentType, patch)
    })

    it('can detect validation changes on moved fields', () => {
      const sourceContentType = {
        name: 'Blog post',
        description: '',
        displayField: 'title',
        fields: [
          {
            id: 'title',
            name: 'Title',
            type: 'Symbol',
            localized: false,
            required: false,
            validations: [],
            disabled: false,
            omitted: false,
          },
          {
            id: 'body',
            name: 'Body',
            type: 'RichText',
            localized: false,
            required: false,
            validations: [
              {
                enabledMarks: ['bold', 'italic', 'underline', 'code'],
                message: 'Only bold, italic, underline, and code marks are allowed',
              },
              {
                enabledNodeTypes: [
                  BLOCKS.HEADING_1,
                  BLOCKS.HEADING_2,
                  BLOCKS.HEADING_3,
                  BLOCKS.HEADING_4,
                  BLOCKS.HEADING_5,
                  BLOCKS.HEADING_6,
                  BLOCKS.OL_LIST,
                  BLOCKS.UL_LIST,
                  BLOCKS.HR,
                  BLOCKS.QUOTE,
                  BLOCKS.EMBEDDED_ENTRY,
                  BLOCKS.EMBEDDED_ASSET,
                  INLINES.HYPERLINK,
                  INLINES.ENTRY_HYPERLINK,
                  INLINES.ASSET_HYPERLINK,
                  INLINES.EMBEDDED_ENTRY,
                ],
                message:
                  'Only heading 1, heading 2, heading 3, heading 4, heading 5, heading 6, ordered list, unordered list, horizontal rule, quote, block entry, asset, link to Url, link to entry, link to asset, and inline entry nodes are allowed',
              },
              {
                nodes: {},
              },
            ],
            disabled: false,
            omitted: false,
          },
        ],
        sys: {
          space: {
            sys: {
              type: 'Link',
              linkType: 'Space',
              id: '76yyote08qaz',
            },
          },
          id: 'blogPost',
          type: 'ContentType',
          createdAt: '2021-11-09T14:57:21.085Z',
          updatedAt: '2022-05-31T11:16:20.464Z',
          environment: {
            sys: {
              id: 'master',
              type: 'Link',
              linkType: 'Environment',
            },
          },
          publishedVersion: 11,
          publishedAt: '2022-05-31T11:16:20.464Z',
          firstPublishedAt: '2021-11-09T14:57:21.509Z',
          createdBy: {
            sys: {
              type: 'Link',
              linkType: 'User',
              id: '3HsgNPGVSaOAQJLYjAOICG',
            },
          },
          updatedBy: {
            sys: {
              type: 'Link',
              linkType: 'User',
              id: '3HsgNPGVSaOAQJLYjAOICG',
            },
          },
          publishedCounter: 6,
          version: 12,
          publishedBy: {
            sys: {
              type: 'Link',
              linkType: 'User',
              id: '3HsgNPGVSaOAQJLYjAOICG',
            },
          },
        },
      }
      const targetContentType = {
        name: 'Blog post',
        description: '',
        displayField: 'title',
        fields: [
          {
            id: 'body',
            name: 'Body',
            type: 'RichText',
            localized: false,
            required: false,
            validations: [
              {
                enabledNodeTypes: [
                  BLOCKS.HEADING_1,
                  BLOCKS.HEADING_2,
                  BLOCKS.HEADING_3,
                  BLOCKS.HEADING_4,
                  BLOCKS.HEADING_5,
                  BLOCKS.HEADING_6,
                  BLOCKS.OL_LIST,
                  BLOCKS.UL_LIST,
                  BLOCKS.HR,
                  BLOCKS.QUOTE,
                  BLOCKS.EMBEDDED_ENTRY,
                  BLOCKS.EMBEDDED_ASSET,
                  INLINES.HYPERLINK,
                  INLINES.ENTRY_HYPERLINK,
                  INLINES.ASSET_HYPERLINK,
                  INLINES.EMBEDDED_ENTRY,
                ],
              },
              {
                enabledMarks: ['bold', 'italic', 'underline', 'code'],
              },
            ],
            disabled: false,
            omitted: false,
          },
          {
            id: 'markdocField',
            name: 'Markdoc field',
            type: 'Object',
            localized: false,
            required: false,
            validations: [],
            disabled: false,
            omitted: false,
          },
        ],
        sys: {
          space: {
            sys: {
              type: 'Link',
              linkType: 'Space',
              id: '76yyote08qaz',
            },
          },
          id: 'blogPost',
          type: 'ContentType',
          createdAt: '2021-11-09T14:57:21.085Z',
          updatedAt: '2022-05-11T18:14:25.254Z',
          environment: {
            sys: {
              id: 'test',
              type: 'Link',
              linkType: 'Environment',
            },
          },
          publishedVersion: 3,
          publishedAt: '2022-05-11T18:14:25.254Z',
          firstPublishedAt: '2021-11-09T14:57:21.509Z',
          createdBy: {
            sys: {
              type: 'Link',
              linkType: 'User',
              id: '3HsgNPGVSaOAQJLYjAOICG',
            },
          },
          updatedBy: {
            sys: {
              type: 'Link',
              linkType: 'User',
              id: '3HsgNPGVSaOAQJLYjAOICG',
            },
          },
          publishedCounter: 2,
          version: 4,
          publishedBy: {
            sys: {
              type: 'Link',
              linkType: 'User',
              id: '3HsgNPGVSaOAQJLYjAOICG',
            },
          },
        },
      }

      const patch = contentTypesPatch({ sourceContentType, targetContentType, fieldIdMapForAll })

      expectPatchedEqualsSource(targetContentType, sourceContentType, patch)
    })

    it('detects field validation changes', () => {
      const sourceContentType = createContentTypeFixture('source-id', [
        createFieldFixture('source-field-id', {
          validations: [
            {
              enabledMarks: ['bold', 'italic', 'underline', 'code'],
            },
            {
              enabledNodeTypes: [
                'heading-1',
                'heading-2',
                'heading-3',
                'heading-4',
                'heading-5',
                'heading-6',
                'ordered-list',
                'unordered-list',
                'hr',
                'blockquote',
                'embedded-entry-block',
                'embedded-asset-block',
                'hyperlink',
                'entry-hyperlink',
                'asset-hyperlink',
                'embedded-entry-inline',
              ],
            },
            {
              // eslint-disable-next-line @typescript-eslint/ban-ts-comment
              // @ts-ignore
              nodes: {},
            },
          ],
        }),
      ])

      const targetContentType = createContentTypeFixture('source-id', [
        createFieldFixture('source-field-id', {
          validations: [],
        }),
      ])

      const patch = contentTypesPatch({ sourceContentType, targetContentType, fieldIdMapForAll })
      expectPatchedEqualsSource(targetContentType, sourceContentType, patch)
    })

    it('detects field validation changes on fields with changed id', () => {
      const sourceContentType = createContentTypeFixture('content-type-id', [
        createFieldFixture('ext-id-new', {
          validations: [
            {
              enabledMarks: ['bold', 'italic', 'underline', 'code'],
            },
            {
              enabledNodeTypes: [
                'heading-1',
                'heading-2',
                'heading-3',
                'heading-4',
                'heading-5',
                'heading-6',
                'ordered-list',
                'unordered-list',
                'hr',
                'blockquote',
                'embedded-entry-block',
                'embedded-asset-block',
                'hyperlink',
                'entry-hyperlink',
                'asset-hyperlink',
                'embedded-entry-inline',
              ],
            },
            {
              // eslint-disable-next-line @typescript-eslint/ban-ts-comment
              // @ts-ignore
              nodes: {},
            },
          ],
        }),
      ])

      const targetContentType = createContentTypeFixture('content-type-id', [
        createFieldFixture('ext-id-original', {
          validations: [],
        }),
      ])
      const patch = contentTypesPatch({ sourceContentType, targetContentType, fieldIdMapForAll })
      expectPatchedEqualsSource(targetContentType, sourceContentType, patch)
    })
  })

  it('can patch with default values', () => {
    const source = {
      sys: {
        space: {
          sys: {
            type: 'Link',
            linkType: 'Space',
            id: 'eq2choccwqhs',
          },
        },
        id: 'cta',
        type: 'ContentType',
        createdAt: '2022-01-18T20:41:32.728Z',
        updatedAt: '2022-03-02T14:32:05.722Z',
        environment: {
          sys: {
            id: 'Development',
            type: 'Link',
            linkType: 'Environment',
          },
        },
        publishedVersion: 15,
        publishedAt: '2022-03-02T14:32:05.722Z',
        firstPublishedAt: '2022-01-18T20:41:33.144Z',
        createdBy: {
          sys: {
            type: 'Link',
            linkType: 'User',
            id: '6jYFNILOjyLRsw6GGqHeVO',
          },
        },
        updatedBy: {
          sys: {
            type: 'Link',
            linkType: 'User',
            id: '1VvXq5IRHiOO3RjoPXu7h3',
          },
        },
        publishedCounter: 8,
        version: 16,
        publishedBy: {
          sys: {
            type: 'Link',
            linkType: 'User',
            id: '1VvXq5IRHiOO3RjoPXu7h3',
          },
        },
      },
      displayField: 'internal_title',
      name: 'cta',
      description: '',
      fields: [
        {
          id: 'internal_title',
          name: 'Title (internal)',
          type: 'Symbol',
          localized: false,
          required: true,
          validations: [
            {
              unique: true,
            },
            {
              size: {
                max: 128,
              },
              message: 'Allowed to enter maximum 128 characters',
            },
          ],
          disabled: false,
          omitted: false,
        },
        {
          id: 'type',
          name: 'Type',
          type: 'Symbol',
          localized: false,
          required: true,
          validations: [
            {
              size: {
                max: 64,
              },
              message: 'Allowed to enter maximum 64 characters',
            },
            {
              in: ['default'],
            },
          ],
          defaultValue: {
            'en-US': 'default',
          },
          disabled: false,
          omitted: false,
        },
        {
          id: 'target',
          name: 'Target',
          type: 'Symbol',
          localized: false,
          required: true,
          validations: [
            {
              size: {
                max: 32,
              },
              message: 'Allowed to enter maximum 32 characters',
            },
            {
              in: ['_blank', '_self'],
            },
          ],
          defaultValue: {
            'en-US': '_self',
          },
          disabled: false,
          omitted: false,
        },
        {
          id: 'cta_languages',
          name: 'Languages',
          type: 'Array',
          localized: false,
          required: false,
          validations: [],
          disabled: false,
          omitted: false,
          items: {
            type: 'Link',
            validations: [
              {
                linkContentType: ['cta_language'],
              },
            ],
            linkType: 'Entry',
          },
        },
      ],
    }

    const target = {
      sys: {
        space: {
          sys: {
            type: 'Link',
            linkType: 'Space',
            id: 'eq2choccwqhs',
          },
        },
        id: 'cta',
        type: 'ContentType',
        createdAt: '2022-01-18T20:41:32.728Z',
        updatedAt: '2022-08-16T13:52:53.712Z',
        environment: {
          sys: {
            id: 'master',
            type: 'Link',
            linkType: 'Environment',
          },
        },
        publishedVersion: 41,
        publishedAt: '2022-08-16T13:52:53.712Z',
        firstPublishedAt: '2022-01-18T20:41:33.144Z',
        createdBy: {
          sys: {
            type: 'Link',
            linkType: 'User',
            id: '6jYFNILOjyLRsw6GGqHeVO',
          },
        },
        updatedBy: {
          sys: {
            type: 'Link',
            linkType: 'User',
            id: '46gWyVccrrgFZOZa3I5W0f',
          },
        },
        publishedCounter: 21,
        version: 42,
        publishedBy: {
          sys: {
            type: 'Link',
            linkType: 'User',
            id: '46gWyVccrrgFZOZa3I5W0f',
          },
        },
      },
      displayField: 'title',
      name: 'cta',
      description: '',
      fields: [
        {
          id: 'breadcrumb',
          name: 'breadcrumb',
          type: 'Text',
          localized: false,
          required: false,
          validations: [],
          disabled: false,
          omitted: true,
        },
        {
          id: 'tagging',
          name: 'Tagging',
          type: 'Symbol',
          localized: false,
          required: true,
          validations: [],
          disabled: false,
          omitted: true,
        },
        {
          id: 'title',
          name: 'Title',
          type: 'Symbol',
          localized: false,
          required: true,
          validations: [
            {
              unique: true,
            },
            {
              size: {
                max: 256,
              },
              message: 'Allowed to enter maximum 256 characters',
            },
          ],
          disabled: false,
          omitted: false,
        },
        {
          id: 'type',
          name: 'Type',
          type: 'Symbol',
          localized: false,
          required: true,
          validations: [
            {
              size: {
                max: 64,
              },
              message: 'Allowed to enter maximum 64 characters',
            },
            {
              in: ['default', 'Button', 'Link'],
            },
          ],
          defaultValue: {
            'en-GB': 'default',
          },
          disabled: false,
          omitted: false,
        },
        {
          id: 'target',
          name: 'Target',
          type: 'Symbol',
          localized: false,
          required: true,
          validations: [
            {
              size: {
                max: 32,
              },
              message: 'Allowed to enter maximum 32 characters',
            },
            {
              in: ['_blank', '_self'],
            },
          ],
          defaultValue: {
            'en-GB': '_self',
          },
          disabled: false,
          omitted: false,
        },
        {
          id: 'cta_languages',
          name: 'Languages',
          type: 'Array',
          localized: false,
          required: false,
          validations: [],
          disabled: false,
          omitted: false,
          items: {
            type: 'Link',
            validations: [
              {
                linkContentType: ['cta_language'],
              },
            ],
            linkType: 'Entry',
          },
        },
        {
          id: 'gtmText',
          name: 'GTMText',
          type: 'Object',
          localized: false,
          required: false,
          validations: [],
          disabled: false,
          omitted: false,
        },
        {
          id: 'publishPriority',
          name: 'Publish Priority',
          type: 'Symbol',
          localized: false,
          required: true,
          validations: [
            {
              in: ['Low', 'High'],
            },
          ],
          disabled: false,
          omitted: true,
        },
        {
          id: 'approvalStep',
          name: 'Approval Step',
          type: 'Symbol',
          localized: false,
          required: true,
          validations: [],
          disabled: false,
          omitted: true,
        },
      ],
    }

    const patch = contentTypesPatch({
      sourceContentType: source,
      targetContentType: target,
      fieldIdMapForAll,
    })

    const result = createPatchedDocument(target, patch)
    expect(result).to.eqls({ ...source, sys: target.sys })
  })
})

function expectPatchedEqualsSource(
  targetContentType: ContentTypeProps,
  sourceContentType: ContentTypeProps,
  patch: Patch
): void {
  const patched = createPatchedDocument(targetContentType, patch)
  expect(omit(patched, ['sys'])).to.eql(omit(sourceContentType, ['sys']))
}
