import { expect } from 'chai'
import { PlainClientAPI } from 'contentful-management'
import sinon from 'sinon'
import { contentTypesLoadAndCreate } from './content-types-load-and-create'

const mockedPlainAPI = {
  raw: {
    get: sinon.fake.returns(
      new Promise((resolve) =>
        resolve({
          items: [],
          limit: 100,
          skip: 100,
        })
      )
    ),
  },
}

type MockedApiCall = [
  string,
  {
    params: Record<string, unknown>
    headers: Record<string, unknown>
  }
]

// eslint-disable-next-line @typescript-eslint/explicit-function-return-type
function getIfSkippedTransformation(calls: MockedApiCall[], skipped = false) {
  return calls.filter((call) => call[1].headers['X-Contentful-Skip-Transformation'] === skipped)
}

describe('Loads content types and creates a diff', () => {
  it('loads internal and external for both environments', async () => {
    const mockedClient = mockedPlainAPI as unknown as PlainClientAPI
    await contentTypesLoadAndCreate({
      clients: { sourceEnvironmentClient: mockedClient, targetEnvironmentClient: mockedClient },
      spaceId: 'space',
      sourceEnvironmentId: 'test-source',
      targetEnvironmentId: 'test-target',
    })

    const apiCalls = mockedPlainAPI.raw.get.getCalls()
    const argsOfCalls = apiCalls.map((call) => call.args) as MockedApiCall[]

    expect(apiCalls.length).to.eqls(4)

    // Does 2 calls for internal content type and 2 for external
    expect(getIfSkippedTransformation(argsOfCalls, true).length).to.eqls(2)
    expect(getIfSkippedTransformation(argsOfCalls, false).length).to.eqls(2)
  })
})
