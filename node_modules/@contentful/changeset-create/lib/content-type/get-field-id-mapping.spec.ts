import { expect } from 'chai'
import { createInternalContentTypeMock } from '../../test/mocks'
import { createFieldFixture } from '@contentful/changeset-test-fixtures'
import { deepClone } from 'fast-json-patch'
import {
  getInternalIds,
  getFieldIdMapping,
  getFieldIdsToMatchBy,
  getAllFieldIdsByContentType,
  getAllFieldIdsFromContentType,
} from './get-field-id-mapping'

describe('the getFieldIdMapping function', () => {
  it('returns a map which, for source and target environment, groups all field ids by content type and defines which id (internal or external) should be used for matching', () => {
    const firstContentType = createInternalContentTypeMock('first', [
      createFieldFixture('id-1'),
      createFieldFixture('id-2'),
    ])
    const secondContentType = createInternalContentTypeMock('second', [
      createFieldFixture('id-3'),
      createFieldFixture('id-4'),
    ])

    const targetInternalContentTypes = [deepClone(firstContentType), deepClone(secondContentType)]

    secondContentType.fields[0].apiName = 'new-id-1'
    secondContentType.fields[1].id = 'different-internal-id'
    const sourceInternalContentTypes = [firstContentType, secondContentType]

    const result = getFieldIdMapping(sourceInternalContentTypes, targetInternalContentTypes)

    const expected = new Map([
      [
        'first',
        // all fields can match via internal id
        {
          source: new Map([
            ['id-1', 'internal-id-1'],
            ['id-2', 'internal-id-2'],
          ]),
          target: new Map([
            ['id-1', 'internal-id-1'],
            ['id-2', 'internal-id-2'],
          ]),
        },
      ],
      [
        'second',
        // 'internal-id-3' has different external ids, but will match via internal id
        // 'id-4' has different internal ids, therefore will match via external id
        {
          source: new Map([
            ['new-id-1', 'internal-id-3'],
            ['id-4', 'id-4'],
          ]),
          target: new Map([
            ['id-3', 'internal-id-3'],
            ['id-4', 'id-4'],
          ]),
        },
      ],
    ])

    expect(result).to.eqls(expected)
  })
})

describe('a set of field id mapping util functions', () => {
  describe('with a getAllFieldIdsFromContentType function', () => {
    it('groups external and internal field ids', () => {
      const contentType = createInternalContentTypeMock('first', [
        createFieldFixture('id-1'),
        createFieldFixture('id-2'),
      ])

      const result = getAllFieldIdsFromContentType(contentType)
      const expected = [
        { externalId: 'id-1', internalId: 'internal-id-1' },
        { externalId: 'id-2', internalId: 'internal-id-2' },
      ]

      expect(result).to.eqls(expected)
    })
  })

  describe('with a getAllFieldIdsByContentType function', () => {
    it('groups external and internal field ids by content type', () => {
      const firstContentType = createInternalContentTypeMock('first', [
        createFieldFixture('id-1'),
        createFieldFixture('id-2'),
      ])
      const secondContentType = createInternalContentTypeMock('second', [
        createFieldFixture('id-2'),
        createFieldFixture('id-3'),
      ])
      const result = getAllFieldIdsByContentType([firstContentType, secondContentType])

      const expected = {
        first: [
          { externalId: 'id-1', internalId: 'internal-id-1' },
          { externalId: 'id-2', internalId: 'internal-id-2' },
        ],
        second: [
          { externalId: 'id-2', internalId: 'internal-id-2' },
          { externalId: 'id-3', internalId: 'internal-id-3' },
        ],
      }

      expect(result).to.eqls(expected)
    })
  })

  describe('with a getInternalIds function', () => {
    it('returns a list of internal ids from an array of field ids', () => {
      const fieldIdGroup = [
        { internalId: 'internal-1', externalId: 'external-1' },
        { internalId: 'internal-2', externalId: 'external-2' },
      ]

      const result = getInternalIds(fieldIdGroup)
      const expected = ['internal-1', 'internal-2']

      expect(result).to.eqls(expected)
    })
  })

  describe('with a getFieldIdsToMatchBy function', () => {
    const sourceFieldIdGroup = [
      { internalId: 'internal-1', externalId: 'external-1' },
      { internalId: 'internal-2', externalId: 'external-2' },
    ]
    it('returns the internal id as matcher if it is present in the given array', () => {
      const targetInternalIds = ['internal-1', 'internal-2', 'internal-3']

      const result = getFieldIdsToMatchBy(sourceFieldIdGroup, targetInternalIds)
      const expected = new Map([
        ['external-1', 'internal-1'],
        ['external-2', 'internal-2'],
      ])

      expect(result).to.eqls(expected)
    })
    it('returns the external id as matcher if the internal id is not present in the given array', () => {
      const targetInternalIds = ['internal-3']

      const result = getFieldIdsToMatchBy(sourceFieldIdGroup, targetInternalIds)
      const expected = new Map([
        ['external-1', 'external-1'],
        ['external-2', 'external-2'],
      ])

      expect(result).to.eqls(expected)
    })
  })
})
