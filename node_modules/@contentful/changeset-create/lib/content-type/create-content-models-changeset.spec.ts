import { expect } from 'chai'
import type { ContentTypeProps } from 'contentful-management'
import { mockFieldIdMapForAll } from '../../test/mocks'
import { createContentTypeFixture, createFieldFixture } from '@contentful/changeset-test-fixtures'
import { createContentModelsChangeset } from './create-content-models-changeset'
import { deepClone } from 'fast-json-patch'

describe('A content model diffing function', () => {
  let targetContentModel: ContentTypeProps[]
  let sourceContentModel: ContentTypeProps[]
  const fieldIdMapForAll = mockFieldIdMapForAll()

  beforeEach(() => {
    targetContentModel = [
      createContentTypeFixture('content-type-1', [createFieldFixture('field-1')]),
      createContentTypeFixture('content-type-2', [createFieldFixture('field-1')]),
      createContentTypeFixture('content-type-3', [createFieldFixture('field-1')]),
    ]
    sourceContentModel = deepClone(targetContentModel) as ContentTypeProps[]
  })

  it('can detect changed content types based on "name" prop', () => {
    sourceContentModel[0].name = 'new content type name'

    const changeset = createContentModelsChangeset({
      sourceContentModel,
      targetContentModel,
      fieldIdMapForAll,
    })

    expect(changeset.items.filter((item) => item.changeType === 'add').length).to.equal(0)
    expect(changeset.items.filter((item) => item.changeType === 'delete').length).to.equal(0)
    expect(changeset.items.filter((item) => item.changeType === 'update').length).to.equal(1)
  })

  it('can detect changed content types based on an added field', () => {
    sourceContentModel[0].fields.push(createFieldFixture('field-2'))

    const changeset = createContentModelsChangeset({
      sourceContentModel,
      targetContentModel,
      fieldIdMapForAll,
    })

    expect(changeset.items.filter((item) => item.changeType === 'add').length).to.equal(0)
    expect(changeset.items.filter((item) => item.changeType === 'delete').length).to.equal(0)
    expect(changeset.items.filter((item) => item.changeType === 'update').length).to.equal(1)
  })

  it('can detect changed content types based on field changes', () => {
    sourceContentModel[0].fields[0].disabled = true

    const changeset = createContentModelsChangeset({
      sourceContentModel,
      targetContentModel,
      fieldIdMapForAll,
    })

    expect(changeset.items.filter((item) => item.changeType === 'add').length).to.equal(0)
    expect(changeset.items.filter((item) => item.changeType === 'delete').length).to.equal(0)
    expect(changeset.items.filter((item) => item.changeType === 'update').length).to.equal(1)
  })

  it('can detect changed content types based on moved fields', () => {
    targetContentModel = [
      createContentTypeFixture('content-type-1', [
        createFieldFixture('field-1'),
        createFieldFixture('field-2'),
        createFieldFixture('field-3'),
      ]),
    ]
    sourceContentModel = [
      createContentTypeFixture('content-type-1', [
        createFieldFixture('field-3'),
        createFieldFixture('field-2'),
        createFieldFixture('field-1'),
      ]),
    ]

    const changeset = createContentModelsChangeset({
      sourceContentModel,
      targetContentModel,
      fieldIdMapForAll,
    })

    expect(changeset.items.filter((item) => item.changeType === 'add').length).to.equal(0)
    expect(changeset.items.filter((item) => item.changeType === 'delete').length).to.equal(0)
    expect(changeset.items.filter((item) => item.changeType === 'update').length).to.equal(1)
  })

  it('can detect added content type', () => {
    targetContentModel.splice(0, 1)

    const diff = createContentModelsChangeset({
      sourceContentModel,
      targetContentModel,
      fieldIdMapForAll,
    })

    expect(diff.items.filter((item) => item.changeType === 'add').length).to.equal(1)
    expect(diff.items.filter((item) => item.changeType === 'delete').length).to.equal(0)
    expect(diff.items.filter((item) => item.changeType === 'update').length).to.equal(0)
  })

  it('can detect removed content type', () => {
    sourceContentModel.splice(0, 1)

    const diff = createContentModelsChangeset({
      sourceContentModel,
      targetContentModel,
      fieldIdMapForAll,
    })

    expect(diff.items.filter((item) => item.changeType === 'add').length).to.equal(0)
    expect(diff.items.filter((item) => item.changeType === 'delete').length).to.equal(1)
    expect(diff.items.filter((item) => item.changeType === 'update').length).to.equal(0)
  })
})
