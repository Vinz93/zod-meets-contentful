import type { ContentTypeProps } from 'contentful-management'
import type { FieldIdMapForAll } from './types'
import { createFieldHash } from './utils'
import { Patch, generateJSONPatch, pathInfo } from 'generate-json-patch'

export function contentTypesPatch({
  sourceContentType,
  targetContentType,
  fieldIdMapForAll,
}: {
  sourceContentType: ContentTypeProps
  targetContentType: ContentTypeProps
  fieldIdMapForAll: FieldIdMapForAll
}): Patch {
  const contentTypeId = targetContentType.sys.id
  const fieldIdMapForContentType = fieldIdMapForAll.get(contentTypeId)
  const fieldHashFunction = createFieldHash(fieldIdMapForContentType)

  // eslint-disable-next-line @typescript-eslint/ban-ts-comment
  // @ts-ignore
  return generateJSONPatch(targetContentType, sourceContentType, {
    propertyFilter: function (name: string, context) {
      const { length } = pathInfo(context.path)
      // ignore sys prop on root level
      if (length === 1) {
        return !['sys'].includes(name)
      }
      return true
    },
    objectHash: function (value, context) {
      const { length, segments } = pathInfo(context.path)
      // dedicated comparator for top-level `fields` property
      if (length === 2 && segments[1] === 'fields') {
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore
        return fieldHashFunction(value, undefined, context.side)
      }
      return context.index.toString()
    },
    // array: { ignoreMove: true },
  })
}
