import {
  AddedChangesetItem,
  ChangedChangesetItem,
  Changeset,
  ChangesetItemType,
  DeletedChangesetItem,
} from '@contentful/changeset-types'
import { createEntityLink } from './create-entity-link'
import { WithSys } from './types'
import { Operation } from 'generate-json-patch'

export type CreateChangesetForEntityCollectionProps<EntityType extends WithSys, ItemType extends ChangesetItemType> = {
  sourceCollection: EntityType[]
  targetCollection: EntityType[]
  itemType: ItemType
  createEntityPatch: (sourceEntity: EntityType, targetEntity: EntityType) => Operation[]
}

export function createChangesetForEntityCollection<EntityType extends WithSys, ItemType extends ChangesetItemType>({
  sourceCollection,
  targetCollection,
  itemType,
  createEntityPatch,
}: CreateChangesetForEntityCollectionProps<EntityType, ItemType>): Changeset<ItemType> {
  const sourceIds = sourceCollection.map((item) => item.sys.id)
  const targetIds = targetCollection.map((item) => item.sys.id)

  const maybeChanged = sourceIds.filter((id) => targetIds.includes(id))
  const removed = targetIds.filter((id) => !sourceIds.includes(id))
  const added = sourceIds.filter((id) => !targetIds.includes(id))

  const changedItems: Array<ChangedChangesetItem<ItemType>> = maybeChanged
    .map((id) => {
      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
      const sourceItem = sourceCollection.find((s) => s.sys.id === id)!
      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
      const targetItem = targetCollection.find((s) => s.sys.id === id)!

      return {
        changeType: 'update',
        entity: createEntityLink(targetItem, itemType),
        patch: createEntityPatch(sourceItem, targetItem),
      }
    })
    .filter((item) => item.patch.length > 0) as Array<ChangedChangesetItem<ItemType>>

  const addedItems: Array<AddedChangesetItem<ItemType>> = sourceCollection
    .filter((item) => added.includes(item.sys.id))
    .map((item) => {
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      const { sys, ...data } = item
      return {
        changeType: 'add',
        entity: createEntityLink(item, itemType),
        data,
      }
    })

  const removedItems: Array<DeletedChangesetItem<ItemType>> = targetCollection
    .filter((item) => removed.includes(item.sys.id))
    .map((item) => ({
      changeType: 'delete',
      entity: createEntityLink(item, itemType),
    }))

  return {
    sys: {
      type: 'Changeset',
    },
    items: [...addedItems, ...removedItems, ...changedItems],
  }
}
