import { Patch, generateJSONPatch, pathInfo } from 'generate-json-patch'
import { EditorInterfaceProps } from 'contentful-management'
import { getDefaultFieldControls } from '@contentful/changeset-utils'

export function editorInterfacePatch({
  sourceItem,
  targetItem,
}: {
  sourceItem: EditorInterfaceProps
  targetItem: EditorInterfaceProps
}): Patch {
  const targetFieldControls = targetItem.controls || []
  const sourceFieldControls = sourceItem.controls || []
  const targetFieldControlIds = new Set(targetFieldControls.map((fieldControl) => fieldControl.fieldId))
  const sourceFieldControlIds = new Set(sourceFieldControls.map((fieldControl) => fieldControl.fieldId))

  const addedFieldControls = sourceFieldControls.filter(({ fieldId }) => !targetFieldControlIds.has(fieldId))
  // This creates a control item for all added field controls
  // We do this because during merging, this patch will be applied to the editor interface after
  // these fields have been added by the backend during the content type update.
  const defaultAddedFieldControls = getDefaultFieldControls(addedFieldControls)

  // We remove controls which are not present in the source environment.
  // Again, we do this because during merging, this patch will be applied to the editor interface after
  // these fields have been removed by the backend during the content type update.
  const targetFieldControlsWithoutRemoved = targetFieldControls.filter(({ fieldId }) =>
    sourceFieldControlIds.has(fieldId)
  )

  const targetFieldControlsWithoutRemovedWithAdded = [
    ...targetFieldControlsWithoutRemoved,
    ...defaultAddedFieldControls,
  ]

  return generateJSONPatch(
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore
    { controls: targetFieldControlsWithoutRemovedWithAdded },
    { controls: sourceFieldControls },
    {
      objectHash: function (value, context) {
        const { length, segments } = pathInfo(context.path)

        if (length === 2 && segments[1] === 'controls') {
          // eslint-disable-next-line @typescript-eslint/ban-ts-comment
          // @ts-ignore
          return value.fieldId
        }
        return context.index.toString()
      },
    }
    // We want to ignore any move operations for editor interface controls.
    // Check the changeset-export README.md#editor-interface-controls-order
  ).filter((operation) => operation.op !== 'move')
}
