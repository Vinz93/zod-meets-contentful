import { Changeset } from '@contentful/changeset-types'
import getContentfulCollection from 'contentful-collection'
import { ContentTypeProps, EditorInterfaceProps, PlainClientAPI } from 'contentful-management'
import { LoadAndCreateParams } from '../common'
import { createEditorInterfaceChangeset } from './create-editor-interface-changeset'

const LIMIT = 100

type GetEditorInterfaceParams = {
  client: PlainClientAPI
  spaceId: string
  environmentId: string
}

function getManyEditorInterface({
  client,
  environmentId,
  spaceId,
}: GetEditorInterfaceParams): Promise<EditorInterfaceProps[]> {
  return getContentfulCollection<EditorInterfaceProps>((options) =>
    client.raw.get(`/spaces/${spaceId}/environments/${environmentId}/editor_interfaces`, {
      params: {
        limit: options.limit || LIMIT,
        skip: options.skip,
      },
    })
  )
}

export async function editorInterfaceLoadAndCreate({
  clients: { sourceEnvironmentClient, targetEnvironmentClient },
  spaceId,
  sourceEnvironmentId,
  targetEnvironmentId,
  sourceContentModel,
}: LoadAndCreateParams & { sourceContentModel?: ContentTypeProps[] }): Promise<Changeset<'EditorInterface'>> {
  const [sourceModel, targetModel] = await Promise.all([
    getManyEditorInterface({
      spaceId,
      client: sourceEnvironmentClient,
      environmentId: sourceEnvironmentId,
    }),
    getManyEditorInterface({
      spaceId,
      client: targetEnvironmentClient,
      environmentId: targetEnvironmentId,
    }),
  ])

  return createEditorInterfaceChangeset({
    sourceModel,
    targetModel,
    sourceContentModel,
  })
}
