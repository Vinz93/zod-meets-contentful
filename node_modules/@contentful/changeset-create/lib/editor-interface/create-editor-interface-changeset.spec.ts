import { expect } from 'chai'
import { EditorInterfaceProps } from 'contentful-management'
import { createEditorInterfaceFixture } from '../../test/mocks'
import { createEditorInterfaceChangeset } from './create-editor-interface-changeset'
import {
  createContentTypeFixture,
  createFieldControlFixture,
  createFieldFixture,
} from '@contentful/changeset-test-fixtures'
import { ChangedChangesetItem } from '@contentful/changeset-types'

describe('A createEditorInterfaceChangeset function', () => {
  it('can detect nested field control changes', () => {
    const sourceModel: EditorInterfaceProps[] = [
      {
        ...createEditorInterfaceFixture(),
        controls: [
          {
            fieldId: 'officialLanguages',
            settings: {
              helpText: 'Hey this is the help text: pick one or many languages for your country',
            },
            widgetId: 'listInput',
            widgetNamespace: 'builtin',
          },
        ],
      },
    ]
    const targetModel: EditorInterfaceProps[] = [
      {
        ...createEditorInterfaceFixture(),
        controls: [
          {
            fieldId: 'officialLanguages',
            settings: {
              helpText: 'old helpText',
            },
            widgetId: 'checkbox',
            widgetNamespace: 'builtin',
          },
        ],
      },
    ]

    const changeset = createEditorInterfaceChangeset({ sourceModel, targetModel })

    expect(changeset.items.length).to.equal(1)
    expect(changeset.items[0]).to.eqls({
      changeType: 'update',
      entity: {
        sys: {
          id: 'content-type-id',
          linkType: 'EditorInterface',
          type: 'Link',
        },
      },
      patch: [
        {
          op: 'replace',
          path: '/controls/0/settings/helpText',
          value: 'Hey this is the help text: pick one or many languages for your country',
        },
        { op: 'replace', path: '/controls/0/widgetId', value: 'listInput' },
      ],
    })
  })

  describe('Added editor interfaces', () => {
    it('ignores new field controls with default shape', () => {
      const sourceModel: EditorInterfaceProps[] = [
        {
          ...createEditorInterfaceFixture(),
          controls: [
            {
              fieldId: 'new field id',
            },
          ],
        },
      ]
      const targetModel: EditorInterfaceProps[] = []
      const changeset = createEditorInterfaceChangeset({ sourceModel, targetModel })
      expect(changeset.items.length).to.equal(0)
    })

    it('can detect customized new field controls in added editor interface', () => {
      const sourceModel: EditorInterfaceProps[] = [
        {
          ...createEditorInterfaceFixture(),
          controls: [
            {
              fieldId: 'new field id',
              widgetId: 'some-widget-id',
            },
          ],
        },
      ]
      const targetModel: EditorInterfaceProps[] = []
      const changeset = createEditorInterfaceChangeset({ sourceModel, targetModel })
      expect(changeset.items.length).to.equal(1)
      expect(changeset.items[0]).to.deep.equal({
        changeType: 'update',
        entity: {
          sys: {
            id: 'content-type-id',
            linkType: 'EditorInterface',
            type: 'Link',
          },
        },
        patch: [
          {
            op: 'add',
            path: '/controls/0/widgetId',
            value: 'some-widget-id',
          },
        ],
      })
    })
  })
  describe('Updated editor interfaces', () => {
    it('ignores removed controls, as they will be removed automatically during merge', () => {
      const sourceModel: EditorInterfaceProps[] = [
        {
          ...createEditorInterfaceFixture(),
          controls: [
            {
              fieldId: 'id2',
            },
          ],
        },
      ]

      const targetModel: EditorInterfaceProps[] = [
        {
          ...createEditorInterfaceFixture(),
          controls: [
            {
              fieldId: 'id',
            },
            {
              fieldId: 'id2',
            },
          ],
        },
      ]

      const changeset = createEditorInterfaceChangeset({ sourceModel, targetModel })
      expect(changeset.items.length).to.equal(0)
    })
    it('ignores removed controls, and creates patches with correct indizes', () => {
      const sourceModel: EditorInterfaceProps[] = [
        {
          ...createEditorInterfaceFixture(),
          controls: [
            {
              fieldId: 'id2',
              widgetId: 'checkbox',
              widgetNamespace: 'builtin',
            },
          ],
        },
      ]

      const targetModel: EditorInterfaceProps[] = [
        {
          ...createEditorInterfaceFixture(),
          controls: [
            {
              fieldId: 'id',
            },
            {
              fieldId: 'id2',
            },
          ],
        },
      ]

      const changeset = createEditorInterfaceChangeset({ sourceModel, targetModel })
      expect(changeset.items.length).to.equal(1)
      expect((changeset.items[0] as ChangedChangesetItem).patch).to.deep.equal([
        // These are expected at index 0 as they assume the removed control already removed
        {
          op: 'add',
          path: '/controls/0/widgetId',
          value: 'checkbox',
        },
        {
          op: 'add',
          path: '/controls/0/widgetNamespace',
          value: 'builtin',
        },
      ])
    })
    it('ignores new field controls with default shape', () => {
      const sourceModel: EditorInterfaceProps[] = [
        {
          ...createEditorInterfaceFixture(),
          controls: [
            {
              fieldId: 'id',
            },
          ],
        },
      ]

      const targetModel: EditorInterfaceProps[] = [createEditorInterfaceFixture()]
      const changeset = createEditorInterfaceChangeset({ sourceModel, targetModel })
      expect(changeset.items.length).to.equal(0)
    })
    it('can detect customized new field controls in updated editor interface)', () => {
      const sourceModel: EditorInterfaceProps[] = [
        {
          ...createEditorInterfaceFixture(),
          controls: [
            {
              fieldId: 'new field id',
              widgetId: 'custom',
              widgetNamespace: 'builtin',
            },
          ],
        },
      ]
      const targetModel: EditorInterfaceProps[] = [createEditorInterfaceFixture()]
      const changeset = createEditorInterfaceChangeset({ sourceModel, targetModel })
      expect(changeset.items.length).to.equal(1)
      expect(changeset.items[0]).to.eqls({
        changeType: 'update',
        entity: {
          sys: {
            id: 'content-type-id',
            linkType: 'EditorInterface',
            type: 'Link',
          },
        },
        patch: [
          {
            op: 'add',
            path: '/controls/0/widgetId',
            value: 'custom',
          },
          {
            op: 'add',
            path: '/controls/0/widgetNamespace',
            value: 'builtin',
          },
        ],
      })
    })

    it('ignores field control order changes', () => {
      const sourceModel: EditorInterfaceProps[] = [
        {
          ...createEditorInterfaceFixture(),
          controls: [
            createFieldControlFixture('field-1'),
            createFieldControlFixture('field-2'),
            createFieldControlFixture('field-3'),
          ],
        },
      ]
      const targetModel: EditorInterfaceProps[] = [
        {
          ...createEditorInterfaceFixture(),
          controls: [
            createFieldControlFixture('field-3'),
            createFieldControlFixture('field-1'),
            createFieldControlFixture('field-2'),
          ],
        },
      ]
      const changeset = createEditorInterfaceChangeset({ sourceModel, targetModel })
      expect(changeset.items.length).to.equal(0)
    })

    it('ignores adding the new field control, ignores removing a field, ignores field control order changes', () => {
      const sourceModel: EditorInterfaceProps[] = [
        {
          ...createEditorInterfaceFixture(),
          controls: [
            createFieldControlFixture('field-3'),
            createFieldControlFixture('field-1'),
            createFieldControlFixture('field-4'),
          ],
        },
      ]
      const targetModel: EditorInterfaceProps[] = [
        {
          ...createEditorInterfaceFixture(),
          controls: [
            createFieldControlFixture('field-1'),
            createFieldControlFixture('field-2'),
            createFieldControlFixture('field-3'),
          ],
        },
      ]
      const changeset = createEditorInterfaceChangeset({ sourceModel, targetModel })

      expect(changeset.items.length).to.equal(0)
    })

    it('can detect a changed field but ignores field control order changes', () => {
      const sourceModel: EditorInterfaceProps[] = [
        {
          ...createEditorInterfaceFixture(),
          controls: [
            createFieldControlFixture('field-2'),
            createFieldControlFixture('field-1', { widgetId: 'something new' }),
            createFieldControlFixture('field-3'),
          ],
        },
      ]
      const targetModel: EditorInterfaceProps[] = [
        {
          ...createEditorInterfaceFixture(),
          controls: [
            createFieldControlFixture('field-1'),
            createFieldControlFixture('field-2'),
            createFieldControlFixture('field-3'),
          ],
        },
      ]
      const changeset = createEditorInterfaceChangeset({ sourceModel, targetModel })
      expect((changeset.items[0] as ChangedChangesetItem).patch.length).to.equal(1)
      expect((changeset.items[0] as ChangedChangesetItem).patch).to.deep.equal([
        {
          op: 'add',
          path: '/controls/0/widgetId',
          value: 'something new',
        },
      ])
    })

    it('can detect that a field control that references a field that does not exist in the model and ignores it', () => {
      const sourceModel: EditorInterfaceProps[] = [
        {
          ...createEditorInterfaceFixture(),
          controls: [
            createFieldControlFixture('field-2', { widgetId: 'something new' }),
            createFieldControlFixture('field-1'),
          ],
        },
      ]
      const targetModel: EditorInterfaceProps[] = [
        {
          ...createEditorInterfaceFixture(),
          controls: [createFieldControlFixture('field-1')],
        },
      ]

      const sourceContentModel = [createContentTypeFixture('content-type-id', [createFieldFixture('field-1')])]

      const changeset = createEditorInterfaceChangeset({ sourceModel, targetModel, sourceContentModel })

      expect(changeset.items.length).to.equal(0)
    })
  })
})
