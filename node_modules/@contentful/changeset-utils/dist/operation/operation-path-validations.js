"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isFieldIdChangeOperation = exports.isNestedFieldOperation = exports.isFieldTopLevelOperation = exports.isMetaFieldOperation = exports.isMetaTopOperation = exports.isMoveOperation = exports.isFieldOperation = exports.isMetaOperation = void 0;
/*
  @desc: validate if a given operation holds a "meta" change
 */
const isMetaOperation = (operation) => {
    return operation.path.startsWith('/meta');
};
exports.isMetaOperation = isMetaOperation;
/*
  @desc: validate if a given operation holds a "fields" change
 */
const isFieldOperation = (operation) => {
    return operation.path.startsWith('/fields');
};
exports.isFieldOperation = isFieldOperation;
const isMoveOperation = (operation) => {
    return operation.op === 'move';
};
exports.isMoveOperation = isMoveOperation;
const isMetaTopOperation = (operation) => {
    return ((0, exports.isMetaOperation)(operation) && (operation.path.split('/').length === 4 || operation.path.split('/').length === 2));
};
exports.isMetaTopOperation = isMetaTopOperation;
const isMetaFieldOperation = (operation) => {
    return (0, exports.isMetaOperation)(operation) && operation.path.split('/').length === 5;
};
exports.isMetaFieldOperation = isMetaFieldOperation;
const isFieldTopLevelOperation = (operation) => {
    return (0, exports.isFieldOperation)(operation) && operation.path.split('/').length === 3;
};
exports.isFieldTopLevelOperation = isFieldTopLevelOperation;
const isNestedFieldOperation = (operation) => {
    return (0, exports.isFieldOperation)(operation) && operation.path.split('/').length >= 5;
};
exports.isNestedFieldOperation = isNestedFieldOperation;
const isFieldIdChangeOperation = (operation) => {
    const splitPath = operation.path.split('/');
    return operation.op === 'replace' && splitPath.length === 4 && splitPath[splitPath.length - 1] === 'id';
};
exports.isFieldIdChangeOperation = isFieldIdChangeOperation;
