interface BaseOperation {
    path: string;
}
interface AddOperation<T = any> extends BaseOperation {
    op: "add";
    value: T;
}
interface RemoveOperation extends BaseOperation {
    op: "remove";
}
interface ReplaceOperation<T = any> extends BaseOperation {
    op: "replace";
    value: T;
}
interface MoveOperation extends BaseOperation {
    op: "move";
    from: string;
}
interface CopyOperation extends BaseOperation {
    op: "copy";
    from: string;
}
interface TestOperation<T = any> extends BaseOperation {
    op: "test";
    value: T;
}
type Operation = AddOperation | RemoveOperation | ReplaceOperation | MoveOperation | CopyOperation | TestOperation;
type Patch = Operation[];
interface Delta {
    [key: string]: any;
    [key: number]: any;
}
type InputData = Record<string, any> | Array<any> | string | number | any;
type Options = {
    cloneDiffValues?: boolean;
    textDiff?: {
        minLength?: number;
    };
    objectHash?: (...args: any[]) => string;
    propertyFilter?: (property: string) => boolean;
    arrays?: {
        detectMove?: boolean;
        includeValueOnMove?: boolean;
    };
};

declare class DiffPatcher {
    private processor;
    constructor(options?: Options);
    options(...args: any[]): Options;
    diff(left: InputData, right: InputData): any;
    patch(left: InputData, delta: Delta): any;
    reverse(delta: Delta): any;
    unpatch(right: InputData, delta: Delta): any;
    clone<T>(value: T): T;
}

declare class BaseFormatter {
    protected includeMoveDestinations?: boolean;
    format(delta?: Delta, left?: InputData): any;
    prepareContext(context: any): void;
    typeFormatterNotFound(context: any, deltaType: any): void;
    typeFormatterErrorFormatter(context: any, err: any, ...rest: any[]): any;
    finalize({ buffer }: any): any;
    recurse(context: any, delta?: Delta, left?: InputData, key?: any, leftKey?: any, movedFrom?: any, isLast?: boolean): any;
    formatDeltaChildren(context: any, delta: any, left: any): void;
    forEachDeltaKey(delta: any, left: any, fn: any): void;
    getDeltaType(delta: any, movedFrom: any): "movedestination" | "unchanged" | "added" | "modified" | "deleted" | "textdiff" | "moved" | "node" | "unknown";
    parseTextDiff(value: any): any[];
    protected nodeBegin(context: any, key: any, leftKey: any, type: string, nodeType: string, isLast: boolean): void;
    protected rootBegin(context: any, type: string, nodeType: string): void;
    protected nodeEnd(context: any, key: any, leftKey: any, type: string, nodeType: string, isLast: boolean): void;
    protected rootEnd(context: any, type: string, nodeType: string): void;
}

declare namespace base {
  export {
    BaseFormatter as default,
  };
}

declare function format$3(delta: any, left: any): any;
declare function showUnchanged(show: any, node: any, delay: any): void;
declare function hideUnchanged(node: any, delay: any): void;

declare class HtmlFormatter extends BaseFormatter {
    typeFormatterErrorFormatter(context: any, err: any): void;
    formatValue(context: any, value: any): void;
    formatTextDiffString(context: any, value: any): void;
    rootBegin(context: any, type: any, nodeType: any): void;
    rootEnd(context: any): void;
    nodeBegin(context: any, key: any, leftKey: any, type: any, nodeType: any): void;
    nodeEnd(context: any): void;
    format_unchanged(context: any, delta: any, left: any): void;
    format_movedestination(context: any, delta: any, left: any): void;
    format_node(context: any, delta: any, left: any): void;
    format_added(context: any, delta: any): void;
    format_modified(context: any, delta: any): void;
    format_deleted(context: any, delta: any): void;
    format_moved(context: any, delta: any): void;
    format_textdiff(context: any, delta: any): void;
}

declare const html_hideUnchanged: typeof hideUnchanged;
declare const html_showUnchanged: typeof showUnchanged;
declare namespace html {
  export {
    HtmlFormatter as default,
    format$3 as format,
    html_hideUnchanged as hideUnchanged,
    html_showUnchanged as showUnchanged,
  };
}

declare function format$2(delta: any, left: any): any;

declare class AnnotatedFormatter extends BaseFormatter {
    includeMoveDestinations: boolean;
    prepareContext(context: any): void;
    typeFormatterErrorFormatter(context: any, err: any): void;
    formatTextDiffString(context: any, value: any): void;
    rootBegin(context: any, type: any, nodeType: any): void;
    rootEnd(context: any, type: any): void;
    nodeBegin(context: any, key: any, leftKey: any, type: any, nodeType: any): void;
    nodeEnd(context: any, key: any, leftKey: any, type: any, nodeType: any, isLast: any): void;
    format_unchanged(): void;
    format_movedestination(): void;
    format_node(context: any, delta: any, left: any): void;
    format_added: (context: any, delta: any, ...args: any[]) => void;
    format_modified: (context: any, delta: any, ...args: any[]) => void;
    format_deleted: (context: any, delta: any, ...args: any[]) => void;
    format_moved: (context: any, delta: any, ...args: any[]) => void;
    format_textdiff: (context: any, delta: any, ...args: any[]) => void;
}

declare namespace annotated {
  export {
    AnnotatedFormatter as default,
    format$2 as format,
  };
}

declare class JSONFormatter extends BaseFormatter {
    constructor();
    prepareContext(context: any): void;
    typeFormatterErrorFormatter(context: any, err: any): void;
    protected rootBegin(): void;
    protected rootEnd(): void;
    protected nodeBegin({ path }: {
        path: any;
    }, key: any, leftKey: any): void;
    protected nodeEnd({ path }: {
        path: any;
    }): void;
    format_unchanged(): void;
    format_movedestination(): void;
    format_node(context: any, delta: any, left: any): void;
    format_added(context: any, delta: any): void;
    format_modified(context: any, delta: any): void;
    format_deleted(context: any): void;
    format_moved(context: any, delta: any): void;
    format_textdiff(): void;
    format(delta?: Delta, left?: InputData): any;
}

declare const partitionOps: (arr: Patch, fns: any) => any[][];
declare const format$1: (delta?: Delta, left?: InputData) => Patch;
declare const log$1: (delta: any, left: any) => void;

declare const jsonpatch_partitionOps: typeof partitionOps;
declare namespace jsonpatch {
  export {
    JSONFormatter as default,
    format$1 as format,
    log$1 as log,
    jsonpatch_partitionOps as partitionOps,
  };
}

declare function log(delta: any, left: any): void;

declare function format(delta: any, left: any): any;
declare class ConsoleFormatter extends BaseFormatter {
    includeMoveDestinations: boolean;
    prepareContext(context: any): void;
    typeFormatterErrorFormatter(context: any, err: any): void;
    formatValue(context: any, value: any): void;
    formatTextDiffString(context: any, value: any): void;
    rootBegin(context: any, type: any, nodeType: any): void;
    rootEnd(context: any, type: any, nodeType: any): void;
    nodeBegin(context: any, key: any, leftKey: any, type: any, nodeType: any): void;
    nodeEnd(context: any, key: any, leftKey: any, type: any, nodeType: any, isLast: any): void;
    format_unchanged(context: any, delta: any, left: any): void;
    format_movedestination(context: any, delta: any, left: any): void;
    format_node(context: any, delta: any, left: any): void;
    format_added(context: any, delta: any): void;
    format_modified(context: any, delta: any): void;
    format_deleted(context: any, delta: any): void;
    format_moved(context: any, delta: any): void;
    format_textdiff(context: any, delta: any): void;
}

declare const console_format: typeof format;
declare const console_log: typeof log;
declare namespace console {
  export {
    ConsoleFormatter as default,
    console_format as format,
    console_log as log,
  };
}

declare const index_annotated: typeof annotated;
declare const index_base: typeof base;
declare const index_console: typeof console;
declare const index_html: typeof html;
declare const index_jsonpatch: typeof jsonpatch;
declare namespace index {
  export {
    index_annotated as annotated,
    index_base as base,
    index_console as console,
    index_html as html,
    index_jsonpatch as jsonpatch,
  };
}

declare function create(options?: Options): DiffPatcher;
declare function diff(left: InputData, right: InputData): any;
declare function patch(left: InputData, delta: Delta): any;
declare function unpatch(right: InputData, delta: Delta): any;
declare function reverse(delta: Delta): any;
declare function clone<T>(value: T): T;

export { AddOperation, BaseOperation, CopyOperation, Delta, DiffPatcher, InputData, MoveOperation, Operation, Options, Patch, RemoveOperation, ReplaceOperation, TestOperation, clone, console, create, diff, index as formatters, patch, reverse, unpatch };
