type JsonObject = {
    [Key in string]: JsonValue | undefined;
};
type JsonArray = JsonValue[] | readonly JsonValue[];
type JsonPrimitive = string | number | boolean | null;
type JsonValue = JsonPrimitive | JsonObject | JsonArray;
interface BaseOperation {
    path: string;
}
interface AddOperation<T = any> extends BaseOperation {
    op: 'add';
    value: T;
}
interface RemoveOperation extends BaseOperation {
    op: 'remove';
}
interface ReplaceOperation<T = any> extends BaseOperation {
    op: 'replace';
    value: T;
}
interface MoveOperation extends BaseOperation {
    op: 'move';
    from: string;
}
interface CopyOperation extends BaseOperation {
    op: 'copy';
    from: string;
}
interface TestOperation<T = any> extends BaseOperation {
    op: 'test';
    value: T;
}
type Operation = AddOperation | RemoveOperation | ReplaceOperation | MoveOperation | CopyOperation | TestOperation;
type Patch = Operation[];
type GeneratePatchContext = {
    side: 'left' | 'right';
    path: string;
};
type ObjectHashContext = GeneratePatchContext & {
    index: number;
};
type ObjectHash = (obj: JsonValue, context: ObjectHashContext) => string;
type PropertyFilter = (propertyName: string, context: GeneratePatchContext) => boolean;
type JsonPatchConfig = {
    objectHash?: ObjectHash;
    propertyFilter?: PropertyFilter;
    array?: {
        ignoreMove?: boolean;
    };
};
declare const defaultObjectHash: ObjectHash;
declare function generateJSONPatch(before: JsonValue, after: JsonValue, config?: JsonPatchConfig): Patch;
type PathInfoResult = {
    segments: string[];
    length: number;
    last: string;
};
declare function pathInfo(path: string): PathInfoResult;

export { AddOperation, BaseOperation, CopyOperation, GeneratePatchContext, JsonArray, JsonObject, JsonPatchConfig, JsonPrimitive, JsonValue, MoveOperation, ObjectHash, ObjectHashContext, Operation, Patch, PathInfoResult, PropertyFilter, RemoveOperation, ReplaceOperation, TestOperation, defaultObjectHash, generateJSONPatch, pathInfo };
